<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Elastic-Job</title>
    <link>http://dangdangdotcom.github.io/elastic-job/post/</link>
    <description>Recent content in Posts on Elastic-Job</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Jan 2016 16:14:21 +0800</lastBuildDate>
    <atom:link href="http://dangdangdotcom.github.io/elastic-job/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Release Notes</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/release_notes/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/release_notes/</guid>
      <description>

&lt;h1 id=&#34;release-notes:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;Release Notes&lt;/h1&gt;

&lt;h2 id=&#34;2-0-0-snapshot:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;2.0.0-SNAPSHOT&lt;/h2&gt;

&lt;h3 id=&#34;新功能:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;新功能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Elastic-Job-Cloud初始版本&lt;/li&gt;
&lt;li&gt;重构原Elastic-Job至Elastic-Job-Lite&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/123&#34;&gt;ISSUE #123&lt;/a&gt; 单机跑定时任务，zk断开后重连，没有触发leader选举&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-1-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.1.1&lt;/h2&gt;

&lt;h3 id=&#34;结构调整:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/116&#34;&gt;ISSUE #116&lt;/a&gt; 作业接口的handleJobExecutionException参数变更&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;功能提升:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/110&#34;&gt;ISSUE #110&lt;/a&gt; 手动触发作业&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/99&#34;&gt;ISSUE #99&lt;/a&gt; 删除作业异步导致作业删除后, 还未结束的作业继续创建zk数据&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-1-0:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.1.0&lt;/h2&gt;

&lt;h3 id=&#34;结构调整-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/97&#34;&gt;ISSUE #97&lt;/a&gt; JobConfiguration重构为SimpleJobConfiguration，DataflowJobConfiguration，ScriptJobConfiguration&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/102&#34;&gt;ISSUE #102&lt;/a&gt; 重新定义Java/Spring Config API，使用Factory+Builder模式代替原有的Constructor+Setter模式&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/104&#34;&gt;ISSUE #104&lt;/a&gt; 移除@Deprecated代码&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/105&#34;&gt;ISSUE #105&lt;/a&gt; 重构Spring命名空间驼峰式定义&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/106&#34;&gt;ISSUE #106&lt;/a&gt; isStreaming配置化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/107&#34;&gt;ISSUE #107&lt;/a&gt; reg-center更名为registry-center-ref&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-8:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.8&lt;/h2&gt;

&lt;h3 id=&#34;新功能-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;新功能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/95&#34;&gt;ISSUE #95&lt;/a&gt; 增加脚本类型作业支持&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-7:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.7&lt;/h2&gt;

&lt;h3 id=&#34;结构调整-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/88&#34;&gt;ISSUE #88&lt;/a&gt; stop作业改名为pause&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;新功能-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;新功能&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/91&#34;&gt;ISSUE #91&lt;/a&gt; 作业生命周期操作API&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;功能提升-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/84&#34;&gt;ISSUE #84&lt;/a&gt; 控制台提供作业启用/禁用按钮操作&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/87&#34;&gt;ISSUE #87&lt;/a&gt; 调整主节点选举流程，作业关闭，禁用和暂停将触发主节点选举&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/93&#34;&gt;ISSUE #93&lt;/a&gt; 注册中心配置提供baseSleepTimeMilliseconds、maxSleepTimeMilliseconds和maxRetries的默认值&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/92&#34;&gt;ISSUE #92&lt;/a&gt; 修改分片总数参数导致仅单一节点执行的监听抛出超时异常&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-6:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.6&lt;/h2&gt;

&lt;h3 id=&#34;功能提升-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/71&#34;&gt;ISSUE #71&lt;/a&gt; 作业关闭功能（shutdown）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/72&#34;&gt;ISSUE #72&lt;/a&gt; 关闭的作业可删除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/81&#34;&gt;ISSUE #81&lt;/a&gt; 使用集中清理作业上次结束状态代替各自清理，各自清理可能导致作业机下线而产生未清理的结束状态&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-3:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/74&#34;&gt;ISSUE #74&lt;/a&gt; 流式处理且失效转移时，失效转移的分片项不能执行一次即停止&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/77&#34;&gt;ISSUE #77&lt;/a&gt; dataflow类型作业，fetchData如果有数据，则应与processData成对执行&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/78&#34;&gt;ISSUE #78&lt;/a&gt; Spring方式配置作业监听启用AOP导致不能正常使用问题&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-5:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.5&lt;/h2&gt;

&lt;h3 id=&#34;功能提升-3:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/2&#34;&gt;ISSUE #2&lt;/a&gt; 增加前置和后置任务&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/60&#34;&gt;ISSUE #60&lt;/a&gt; 可于Dataflow类型作业定制化线程池配置&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/61&#34;&gt;ISSUE #62&lt;/a&gt; 作业状态清理提速&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/65&#34;&gt;ISSUE #65&lt;/a&gt; 增加前置和后置任务Spring命名空间支持&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-4:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/61&#34;&gt;ISSUE #61&lt;/a&gt; 分片和主节点选举同时发生时，死锁问题解决&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/63&#34;&gt;ISSUE #63&lt;/a&gt; 获取作业TreeCache时可能会获取到前缀相同的其他作业的TreeCache&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/69&#34;&gt;ISSUE #69&lt;/a&gt; 分片时如在Zk中有的作业服务器sharding节点不存在将导致无法重新分片&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;结构调整-3:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/59&#34;&gt;ISSUE #59&lt;/a&gt; 将elastic-job依赖的curator从&lt;code&gt;2.8.0&lt;/code&gt;升级至&lt;code&gt;2.10.0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-4:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.4&lt;/h2&gt;

&lt;h3 id=&#34;功能提升-4:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/16&#34;&gt;ISSUE #16&lt;/a&gt; 提供内嵌zookeeper，简化开发环境&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/28&#34;&gt;ISSUE #28&lt;/a&gt; Dataflow类型作业增加&lt;code&gt;processData&lt;/code&gt;批量处理数据的方法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/56&#34;&gt;ISSUE #56&lt;/a&gt; 作业自定义参数设置&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;结构调整-4:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/57&#34;&gt;ISSUE #57&lt;/a&gt; 精简模块，移除&lt;code&gt;elastic-job-test&lt;/code&gt;模块&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/58&#34;&gt;ISSUE #58&lt;/a&gt; 增加批量处理功能导致的作业类型接口变更&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-3:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.3&lt;/h2&gt;

&lt;h3 id=&#34;功能提升-5:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/39&#34;&gt;ISSUE #39&lt;/a&gt; 增加作业辅助监听功能，通过dump命令抓取作业运行时信息&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/43&#34;&gt;ISSUE #43&lt;/a&gt; 增加作业异常处理回调接口&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-5:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/30&#34;&gt;ISSUE #30&lt;/a&gt; 注册中心宕机较长时间后重新恢复，作业无法继续执行&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/36&#34;&gt;ISSUE #36&lt;/a&gt; 任务在控制台暂停之后，无法恢复运行&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/40&#34;&gt;ISSUE #40&lt;/a&gt; TreeCache使用粒度过粗导致内存溢出&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-2:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.2&lt;/h2&gt;

&lt;h3 id=&#34;功能提升-6:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;功能提升&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/6&#34;&gt;ISSUE #6&lt;/a&gt; 校对作业服务器与注册中心时间误差&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/8&#34;&gt;ISSUE #8&lt;/a&gt; 增加misfire开关，默认开启错过任务重新执行&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/9&#34;&gt;ISSUE #9&lt;/a&gt; 分片策略可配置化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/10&#34;&gt;ISSUE #10&lt;/a&gt; 提供根据作业名称hash值取奇偶数分片排序策略&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/14&#34;&gt;ISSUE #14&lt;/a&gt; 控制台修改cron表达式后，任务将实时更新cron&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/20&#34;&gt;ISSUE #20&lt;/a&gt; 运维界面任务列表显示增加cron表达式&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/54&#34;&gt;ISSUE #54&lt;/a&gt; SequencePerpetual类型作业性能提升，将抓取数据改为多线程，之前仅处理数据为多线程&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/55&#34;&gt;ISSUE #55&lt;/a&gt; offset存储功能&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;缺陷修正-6:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;缺陷修正&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/1&#34;&gt;ISSUE #1&lt;/a&gt; 复杂网络环境下IP地址获取不准确的问题&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/13&#34;&gt;ISSUE #13&lt;/a&gt; 作业抛出运行时异常后，后续不会继续触发&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/53&#34;&gt;ISSUE #53&lt;/a&gt; Dataflow的Sequence类型作业采用多线程抓取数据&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;结构调整-5:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;结构调整&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dangdangdotcom/elastic-job/issues/17&#34;&gt;ISSUE #17&lt;/a&gt; 作业类型接口变更&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-0-1:0e7a0379e76a8b6dfd2072d5a9672bab&#34;&gt;1.0.1&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;初始版本&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>为何使用Elastic-Job？</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/why_elastic_job/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/why_elastic_job/</guid>
      <description>

&lt;h1 id=&#34;为何使用elastic-job:d10ff4233114ce67cb052e3d9716188b&#34;&gt;为何使用Elastic-Job？&lt;/h1&gt;

&lt;h2 id=&#34;通用部分:d10ff4233114ce67cb052e3d9716188b&#34;&gt;通用部分&lt;/h2&gt;

&lt;h3 id=&#34;1-分片概念:d10ff4233114ce67cb052e3d9716188b&#34;&gt;1. 分片概念&lt;/h3&gt;

&lt;p&gt;任务的分布式执行，需要将一个任务拆分为n个独立的任务项，然后由分布式的服务器分别执行某一个或几个分片项。&lt;/p&gt;

&lt;p&gt;例如：有一个遍历数据库某张表的作业，现有&lt;code&gt;2&lt;/code&gt;台服务器。为了快速的执行作业，那么每台服务器应执行作业的&lt;code&gt;50%&lt;/code&gt;。
为满足此需求，可将作业分成&lt;code&gt;2&lt;/code&gt;片，每台服务器执行&lt;code&gt;1&lt;/code&gt;片。作业遍历数据的逻辑应为：服务器&lt;code&gt;A&lt;/code&gt;遍历&lt;code&gt;ID&lt;/code&gt;以奇数结尾的数据；服务器&lt;code&gt;B&lt;/code&gt;遍历&lt;code&gt;ID&lt;/code&gt;以偶数结尾的数据。
如果分成&lt;code&gt;10&lt;/code&gt;片，则作业遍历数据的逻辑应为：每片分到的分片项应为&lt;code&gt;ID%10&lt;/code&gt;，而服务器A被分配到分片项&lt;code&gt;0,1,2,3,4&lt;/code&gt;；服务器B被分配到分片项&lt;code&gt;5,6,7,8,9&lt;/code&gt;，直接的结果就是服务器&lt;code&gt;A&lt;/code&gt;遍历&lt;code&gt;ID&lt;/code&gt;以&lt;code&gt;0-4&lt;/code&gt;结尾的数据；服务器&lt;code&gt;B&lt;/code&gt;遍历&lt;code&gt;ID&lt;/code&gt;以&lt;code&gt;5-9&lt;/code&gt;结尾的数据。&lt;/p&gt;

&lt;h3 id=&#34;2-分片项与业务处理解耦:d10ff4233114ce67cb052e3d9716188b&#34;&gt;2. 分片项与业务处理解耦&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Elastic-job&lt;/code&gt;并不直接提供数据处理的功能，框架只会将分片项分配至各个运行中的作业服务器，开发者需要自行处理分片项与真实数据的对应关系。&lt;/p&gt;

&lt;h3 id=&#34;3-个性化参数的适用场景:d10ff4233114ce67cb052e3d9716188b&#34;&gt;3. 个性化参数的适用场景&lt;/h3&gt;

&lt;p&gt;个性化参数即&lt;code&gt;shardingItemParameter&lt;/code&gt;，可以和分片项匹配对应关系，用于将分片项的数字转换为更加可读的业务代码。&lt;/p&gt;

&lt;p&gt;例如：按照地区水平拆分数据库，数据库&lt;code&gt;A&lt;/code&gt;是北京的数据；数据库&lt;code&gt;B&lt;/code&gt;是上海的数据；数据库&lt;code&gt;C&lt;/code&gt;是广州的数据。
如果仅按照分片项配置，开发者需要了解&lt;code&gt;0&lt;/code&gt;表示北京；&lt;code&gt;1&lt;/code&gt;表示上海；&lt;code&gt;2&lt;/code&gt;表示广州。
合理使用个性化参数可以让代码更可读，如果配置为&lt;code&gt;0=北京&lt;/code&gt;,&lt;code&gt;1=上海&lt;/code&gt;,&lt;code&gt;2=广州&lt;/code&gt;，那么代码中直接使用北京，上海，广州的枚举值即可完成分片项和业务逻辑的对应关系。&lt;/p&gt;

&lt;h2 id=&#34;elastic-job-lite:d10ff4233114ce67cb052e3d9716188b&#34;&gt;Elastic-Job-Lite&lt;/h2&gt;

&lt;h3 id=&#34;1-分布式调度:d10ff4233114ce67cb052e3d9716188b&#34;&gt;1. 分布式调度&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Elastic-job-Lite&lt;/code&gt;并无作业调度中心节点，而是基于部署作业框架的程序在到达相应时间点时各自触发调度。&lt;/p&gt;

&lt;p&gt;注册中心仅用于作业注册和监控信息存储。而主作业节点仅用于处理分片和清理等功能。&lt;/p&gt;

&lt;h3 id=&#34;2-作业高可用:d10ff4233114ce67cb052e3d9716188b&#34;&gt;2. 作业高可用&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Elastic-job-Lite&lt;/code&gt;提供最安全的方式执行作业。将分片总数设置为&lt;code&gt;1&lt;/code&gt;，并使用多于&lt;code&gt;1&lt;/code&gt;台的服务器执行作业，作业将会以&lt;code&gt;1&lt;/code&gt;主&lt;code&gt;n&lt;/code&gt;从的方式执行。&lt;/p&gt;

&lt;p&gt;一旦执行作业的服务器崩溃，等待执行的服务器将会在下次作业启动时替补执行。开启失效转移功能效果更好，可以保证在本次作业执行时崩溃，备机立即启动替补执行。&lt;/p&gt;

&lt;h3 id=&#34;3-最大限度利用资源:d10ff4233114ce67cb052e3d9716188b&#34;&gt;3. 最大限度利用资源&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Elastic-job-Lite&lt;/code&gt;也提供最灵活的方式，最大限度的提高执行作业的吞吐量。将分片项设置为大于服务器的数量，最好是大于服务器倍数的数量，作业将会合理的利用分布式资源，动态的分配分片项。&lt;/p&gt;

&lt;p&gt;例如：&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;10&lt;/code&gt;片，则分片项分配结果为服务器&lt;code&gt;A=0,1,2&lt;/code&gt;;服务器&lt;code&gt;B=3,4,5&lt;/code&gt;;服务器&lt;code&gt;C=6,7,8,9&lt;/code&gt;。
如果服务器&lt;code&gt;C&lt;/code&gt;崩溃，则分片项分配结果为服务器&lt;code&gt;A=0,1,2,3,4&lt;/code&gt;;服务器&lt;code&gt;B=5,6,7,8,9&lt;/code&gt;。在不丢失分片项的情况下，最大限度的利用现有资源提高吞吐量。&lt;/p&gt;

&lt;h2 id=&#34;elastic-job-cloud:d10ff4233114ce67cb052e3d9716188b&#34;&gt;Elastic-Job-Cloud&lt;/h2&gt;

&lt;h3 id=&#34;1-分布式调度-1:d10ff4233114ce67cb052e3d9716188b&#34;&gt;1. 分布式调度&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Elastic-job-Cloud&lt;/code&gt;采用&lt;code&gt;Mesos Framework&lt;/code&gt;分片和协调作业调度。采用中心化调度实现难度小于&lt;code&gt;Elastic-job-Lite&lt;/code&gt;的无中心化调度，无需再考虑多线程并发的情况。&lt;/p&gt;

&lt;h3 id=&#34;2-作业高可用-1:d10ff4233114ce67cb052e3d9716188b&#34;&gt;2. 作业高可用&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Elastic-job-Cloud&lt;/code&gt;由&lt;code&gt;Mesos Framework&lt;/code&gt;负责作业高可用和分片。作业丢失会由&lt;code&gt;Mesos Framework&lt;/code&gt;自动在另外的&lt;code&gt;Agent&lt;/code&gt;上重新启动作业分片实例。&lt;/p&gt;

&lt;h3 id=&#34;3-弹性资源利用:d10ff4233114ce67cb052e3d9716188b&#34;&gt;3. 弹性资源利用&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Elastic-job-Cloud&lt;/code&gt;分为&lt;code&gt;2&lt;/code&gt;种作业运行模式：瞬时作业 和 常驻作业。&lt;/p&gt;

&lt;p&gt;瞬时作业会在每一次作业执行完毕后立刻释放资源，保证利用现有资源错峰执行。资源分配和容器启动均占用一定时长，且作业执行时资源不一定充足，因此作业执行会有延迟。瞬时作业适用于间隔时间长，资源消耗多且对执行时间无严格要求的作业。&lt;/p&gt;

&lt;p&gt;常驻作业无论在运行时还是等待运行时，均一直占用分配的资源，可节省过多容器启动和资源分配的开销，适用于间隔时间短，资源需求量稳定的作业。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>环境需求</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/env_required/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/env_required/</guid>
      <description>

&lt;h1 id=&#34;环境需求:5fc72554ce10b593ad2e772b637ec905&#34;&gt;环境需求&lt;/h1&gt;

&lt;h2 id=&#34;java:5fc72554ce10b593ad2e772b637ec905&#34;&gt;Java&lt;/h2&gt;

&lt;p&gt;请使用&lt;code&gt;JDK1.7&lt;/code&gt;及其以上版本。&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt;详情参见&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;zookeeper:5fc72554ce10b593ad2e772b637ec905&#34;&gt;Zookeeper&lt;/h2&gt;

&lt;p&gt;请使用&lt;code&gt;Zookeeper 3.4.6&lt;/code&gt;及其以上版本。&lt;a href=&#34;https://zookeeper.apache.org/doc/trunk/zookeeperStarted.html&#34;&gt;详情参见&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;maven:5fc72554ce10b593ad2e772b637ec905&#34;&gt;Maven&lt;/h2&gt;

&lt;p&gt;请使用&lt;code&gt;Maven 3.0.4&lt;/code&gt;及其以上版本。&lt;a href=&#34;http://maven.apache.org/install.html&#34;&gt;详情参见&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mesos-仅elastic-job-cloud需要:5fc72554ce10b593ad2e772b637ec905&#34;&gt;Mesos(仅Elastic-Job-Cloud需要)&lt;/h2&gt;

&lt;p&gt;请使用&lt;code&gt;Mesos 0.28.0&lt;/code&gt;及其以上版本。&lt;a href=&#34;http://mesos.apache.org/gettingstarted/&#34;&gt;详情参见&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>开发指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/dev_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/dev_guide/</guid>
      <description>

&lt;h1 id=&#34;开发指南:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;开发指南&lt;/h1&gt;

&lt;h2 id=&#34;代码开发:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;代码开发&lt;/h2&gt;

&lt;h3 id=&#34;作业类型:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;作业类型&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;和&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;提供统一作业接口，开发者仅需对业务作业进行一次开发，之后可根据不同的配置以及部署至不同的&lt;code&gt;Lite&lt;/code&gt;或&lt;code&gt;Cloud&lt;/code&gt;环境。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job&lt;/code&gt;提供&lt;code&gt;Simple&lt;/code&gt;、&lt;code&gt;Dataflow&lt;/code&gt;和&lt;code&gt;Script&lt;/code&gt; &lt;code&gt;3&lt;/code&gt;种作业类型。
方法参数&lt;code&gt;shardingContext&lt;/code&gt;包含作业配置、片和运行时信息。可通过&lt;code&gt;getShardingTotalCount()&lt;/code&gt;, &lt;code&gt;getShardingItem()&lt;/code&gt;等方法分别获取分片总数，运行在本作业服务器的分片序列号等。&lt;/p&gt;

&lt;h4 id=&#34;1-simple类型作业:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;1. Simple类型作业&lt;/h4&gt;

&lt;p&gt;意为简单实现，未经任何封装的类型。需实现&lt;code&gt;SimpleJob&lt;/code&gt;接口。该接口仅提供单一方法用于覆盖，此方法将定时执行。与&lt;code&gt;Quartz&lt;/code&gt;原生接口相似，但增加了弹性扩缩容和分片等功能。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyElasticJob implements SimpleJob {
    
    @Override
    public void process(ShardingContext context) {
        switch (shardingItem) {
            case 0: 
                // do something by sharding items 0
                break;
            case 1: 
                // do something by sharding items 1
                break;
            case 2: 
                // do something by sharding items 2
                break;
            // case n: ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-dataflow类型作业:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;2. Dataflow类型作业&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Dataflow&lt;/code&gt;类型用于处理数据流，需实现&lt;code&gt;DataflowJob&lt;/code&gt;接口。该接口提供&lt;code&gt;2&lt;/code&gt;个方法可供覆盖，分别用于抓取(&lt;code&gt;fetchData&lt;/code&gt;)和处理(&lt;code&gt;processData&lt;/code&gt;)数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyElasticJob implements DataflowElasticJob&amp;lt;Foo&amp;gt; {
    
    @Override
    public List&amp;lt;Foo&amp;gt; fetchData(ShardingContext context) {
        List&amp;lt;Foo&amp;gt; result = new LinkedList&amp;lt;&amp;gt;();
        switch (context.getShardingItem()) {
            case 0: 
                List&amp;lt;Foo&amp;gt; data = // get data from database by sharding items 0
                result.addAll(data);
                break;
            case 1: 
                List&amp;lt;Foo&amp;gt; data = // get data from database by sharding items 1
                result.addAll(data);
                break;
            case 2: 
                List&amp;lt;Foo&amp;gt; data = // get data from database by sharding items 2
                result.addAll(data);
                break;
            // case n: ...
        }
        return result;
    }
    
    @Override
    public void processData(ShardingContext shardingContext, List&amp;lt;Foo&amp;gt; data) {
        // process data
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;流式处理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可通过&lt;code&gt;DataflowJobConfiguration&lt;/code&gt;配置是否流式处理。&lt;/p&gt;

&lt;p&gt;流式处理数据只有&lt;code&gt;fetchData&lt;/code&gt;方法的返回值为&lt;code&gt;null&lt;/code&gt;或集合长度为空时，作业才停止抓取，否则作业将一直运行下去；
非流式处理数据则只会在每次作业执行过程中执行一次&lt;code&gt;fetchData&lt;/code&gt;方法和&lt;code&gt;processData&lt;/code&gt;方法，随即完成本次作业。&lt;/p&gt;

&lt;p&gt;如果采用流式作业处理方式，建议&lt;code&gt;processData&lt;/code&gt;处理数据后更新其状态，避免&lt;code&gt;fetchData&lt;/code&gt;再次抓取到，从而使得作业永远不会停止。
流式数据处理参照&lt;code&gt;TbSchedule&lt;/code&gt;设计，适用于不间歇的数据处理。&lt;/p&gt;

&lt;h4 id=&#34;3-script类型作业:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;3. Script类型作业&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Script&lt;/code&gt;类型作业意为脚本类型作业，支持&lt;code&gt;shell&lt;/code&gt;，&lt;code&gt;python&lt;/code&gt;，&lt;code&gt;perl&lt;/code&gt;等所有类型脚本。只需通过控制台或代码配置&lt;code&gt;scriptCommandLine&lt;/code&gt;即可，无需编码。执行脚本路径可包含参数，参数传递完毕后，作业框架会自动追加最后一个参数为作业运行时信息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
echo sharding execution context is $*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作业运行时输出&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sharding execution context is {&amp;quot;shardingItem&amp;quot;:[0,1,2,3,4,5,6,7,8,9],&amp;quot;shardingItemParameters&amp;quot;:{},&amp;quot;offsets&amp;quot;:{},&amp;quot;jobName&amp;quot;:&amp;quot;scriptElasticDemoJob&amp;quot;,&amp;quot;shardingTotalCount&amp;quot;:10,&amp;quot;jobParameter&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;monitorExecution&amp;quot;:true}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;作业配置:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;作业配置&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job&lt;/code&gt;配置分为&lt;code&gt;3&lt;/code&gt;个层级，分别是&lt;code&gt;Core&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;和&lt;code&gt;Root&lt;/code&gt;。每个层级使用相似于装饰者模式的方式装配。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Core&lt;/code&gt;对应&lt;code&gt;JobCoreConfiguration&lt;/code&gt;，用于提供作业核心配置信息，如：作业名称、分片总数、&lt;code&gt;CRON&lt;/code&gt;表达式等。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Type&lt;/code&gt;对应&lt;code&gt;JobTypeConfiguration&lt;/code&gt;，有&lt;code&gt;3&lt;/code&gt;个子类分别对应&lt;code&gt;SIMPLE&lt;/code&gt;, &lt;code&gt;DATAFLOW&lt;/code&gt;和&lt;code&gt;SCRIPT&lt;/code&gt;类型作业，提供&lt;code&gt;3&lt;/code&gt;种作业需要的不同配置，如：&lt;code&gt;DATAFLOW&lt;/code&gt;类型是否流式处理或&lt;code&gt;SCRIPT&lt;/code&gt;类型的命令行等。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Root&lt;/code&gt;对应&lt;code&gt;JobRootConfiguration&lt;/code&gt;，有&lt;code&gt;2&lt;/code&gt;个子类分别对应&lt;code&gt;Lite&lt;/code&gt;和&lt;code&gt;Cloud&lt;/code&gt;部署类型，提供不同部署类型所需的配置，如：&lt;code&gt;Lite&lt;/code&gt;类型的是否需要覆盖或&lt;code&gt;Cloud&lt;/code&gt;占用&lt;code&gt;CPU&lt;/code&gt;或&lt;code&gt;Memory&lt;/code&gt;数量等。&lt;/p&gt;

&lt;h3 id=&#34;使用java代码配置:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;使用Java代码配置&lt;/h3&gt;

&lt;h4 id=&#34;1-通用作业配置:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;1. 通用作业配置&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    
    // 定义作业核心配置配置
    JobCoreConfiguration simpleCoreConfig = JobCoreConfiguration.newBuilder(&amp;quot;demoSimpleJob&amp;quot;, &amp;quot;0/15 * * * * ?&amp;quot;, 10).build();
    
    // 定义SIMPLE类型配置
    SimpleJobConfiguration simpleJobConfig = new SimpleJobConfiguration(simpleCoreConfig, SimpleDemoJob.class.getCanonicalName());
    
    
    // 定义作业核心配置
    JobCoreConfiguration dataflowCoreConfig = JobCoreConfiguration.newBuilder(&amp;quot;demoDataflowJob&amp;quot;, &amp;quot;0/30 * * * * ?&amp;quot;, 10).build();
        
    // 定义DATAFLOW类型配置
    DataflowJobConfiguration dataflowJobConfig = new DataflowJobConfiguration(dataflowCoreConfig, DataflowDemoJob.class.getCanonicalName(), true);
    
    
    // 定义作业核心配置配置
    JobCoreConfiguration scriptCoreConfig = JobCoreConfiguration.newBuilder(&amp;quot;demoScriptJob&amp;quot;, &amp;quot;0/45 * * * * ?&amp;quot;, 10).build();
    
    // 定义SCRIPT类型配置
    ScriptJobConfiguration scriptJobConfig = new ScriptJobConfiguration(scriptCoreConfig, &amp;quot;test.sh&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-lite作业配置:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;2. Lite作业配置&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    JobRootConfiguration jobConfig = LiteJobConfiguration.newBuilder(simpleJobConfig).build();
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-cloud作业配置:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;3. Cloud作业配置&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    // dockerImageName为预留配置, 暂未实现
    JobRootConfiguration jobConfig = new CloudJobConfiguration.newBuilder(simpleJobConfig, cpuCount, memoryMB, dockerImageName, appURL);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;spring命名空间配置:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;Spring命名空间配置&lt;/h3&gt;

&lt;p&gt;与&lt;code&gt;Spring&lt;/code&gt;容器配合使用作业，可将作业&lt;code&gt;Bean&lt;/code&gt;配置为&lt;code&gt;Spring Bean&lt;/code&gt;，并在作业中通过依赖注入使用&lt;code&gt;Spring&lt;/code&gt;容器管理的数据源等对象。可用&lt;code&gt;placeholder&lt;/code&gt;占位符从属性文件中取值。&lt;code&gt;Lite&lt;/code&gt;可考虑使用&lt;code&gt;Spring&lt;/code&gt;命名空间方式简化配置，&lt;code&gt;Cloud&lt;/code&gt;直接使用Spring标准配置文件即可。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xmlns:reg=&amp;quot;http://www.dangdang.com/schema/ddframe/reg&amp;quot;
    xmlns:job=&amp;quot;http://www.dangdang.com/schema/ddframe/job&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans.xsd 
                        http://www.dangdang.com/schema/ddframe/reg 
                        http://www.dangdang.com/schema/ddframe/reg/reg.xsd 
                        http://www.dangdang.com/schema/ddframe/job 
                        http://www.dangdang.com/schema/ddframe/job/job.xsd 
                        &amp;quot;&amp;gt;
    &amp;lt;!--配置作业注册中心 --&amp;gt;
    &amp;lt;reg:zookeeper id=&amp;quot;regCenter&amp;quot; server-lists=&amp;quot; yourhost:2181&amp;quot; namespace=&amp;quot;dd-job&amp;quot; base-sleep-time-milliseconds=&amp;quot;1000&amp;quot; max-sleep-time-milliseconds=&amp;quot;3000&amp;quot; max-retries=&amp;quot;3&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置简单作业--&amp;gt;
    &amp;lt;job:simple id=&amp;quot;simpleElasticJob&amp;quot; class=&amp;quot;xxx.MySimpleElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot;   sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置数据流作业--&amp;gt;
    &amp;lt;job:dataflow id=&amp;quot;throughputDataflow&amp;quot; class=&amp;quot;xxx.MyThroughputDataflowElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置脚本作业--&amp;gt;
    &amp;lt;job:script id=&amp;quot;scriptElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot; sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; script-command-line=&amp;quot;/your/file/path/demo.sh&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置带监听的简单作业--&amp;gt;
    &amp;lt;job:simple id=&amp;quot;listenerElasticJob&amp;quot; class=&amp;quot;xxx.MySimpleListenerElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot;   sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot;&amp;gt;
        &amp;lt;job:listener class=&amp;quot;xx.MySimpleJobListener&amp;quot;/&amp;gt;
        &amp;lt;job:listener class=&amp;quot;xx.MyOnceSimpleJobListener&amp;quot; started-timeout-milliseconds=&amp;quot;1000&amp;quot; completed-timeout-milliseconds=&amp;quot;2000&amp;quot; /&amp;gt;
    &amp;lt;/job:simple&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;job-simple命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;job:simple命名空间属性详细说明&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业实现类，需实现&lt;code&gt;ElasticJob&lt;/code&gt;接口，脚本型作业不需要配置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;registry-center-ref&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;注册中心&lt;code&gt;Bean&lt;/code&gt;的引用，需引用&lt;code&gt;reg:zookeeper&lt;/code&gt;的声明&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;cron&lt;/code&gt;表达式，用于配置作业触发时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sharding-total-count&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业分片总数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sharding-item-parameters&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分片序列号和参数用等号分隔，多个键值对用逗号分隔&lt;br /&gt;分片序列号从&lt;code&gt;0&lt;/code&gt;开始，不可大于或等于作业分片总数&lt;br /&gt;如：&lt;br/&gt;&lt;code&gt;0=a,1=b,2=c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;job-parameter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业自定义参数&lt;br /&gt;作业自定义参数，可通过传递该参数为作业调度的业务方法传参，用于实现带参数的作业&lt;br /&gt;例：每次获取的数据量、作业实例从数据库读取的主键等&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;monitor-execution&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;true&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;监控作业运行时状态&lt;br /&gt;每次作业执行时间和间隔时间均非常短的情况，建议不监控作业运行时状态以提升效率。因为是瞬时状态，所以无必要监控。请用户自行增加数据堆积监控。并且不能保证数据重复选取，应在作业中实现幂等性。&lt;br /&gt;每次作业执行时间和间隔时间均较长的情况，建议监控作业运行时状态，可保证数据不会重复选取。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;monitor-port&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业监控端口&lt;br /&gt;建议配置作业监控端口, 方便开发者dump作业信息。&lt;br /&gt;使用方法: echo &amp;ldquo;dump&amp;rdquo; | nc 127.0.0.1 9888&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;max-time-diff-seconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最大允许的本机与注册中心的时间误差秒数&lt;br /&gt;如果时间误差超过配置秒数则作业启动时将抛异常&lt;br /&gt;配置为&lt;code&gt;-1&lt;/code&gt;表示不校验时间误差&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;failover&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;false&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否开启失效转移&lt;br /&gt;仅&lt;code&gt;monitorExecution&lt;/code&gt;开启，失效转移才有效&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;misfire&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;true&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否开启错过任务重新执行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;job-sharding-strategy-class&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;true&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业分片策略实现类全路径&lt;br /&gt;默认使用平均分配策略&lt;br /&gt;详情参见：&lt;a href=&#34;http://dangdangdotcom.github.io/elastic-job/post/job_strategy&#34;&gt;作业分片策略&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;description&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业描述信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;disabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;false&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业是否禁止启动&lt;br /&gt;可用于部署作业时，先禁止启动，部署结束后统一启动&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;overwrite&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;false&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;本地配置是否可覆盖注册中心配置&lt;br /&gt;如果可覆盖，每次启动作业都以本地配置为准&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jobProperties&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业定制化属性，目前支持&lt;code&gt;job_exception_handler&lt;/code&gt;和&lt;code&gt;executor_service_handler&lt;/code&gt;，用于扩展异常处理和自定义作业处理线程池&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;job-dataflow命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;job:dataflow命名空间属性详细说明&lt;/h4&gt;

&lt;p&gt;job:dataflow命名空间拥有job:simple命名空间的全部属性，以下仅列出特有属性&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;streaming-process&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;false&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否流式处理数据&lt;br /&gt;如果流式处理数据, 则&lt;code&gt;fetchData&lt;/code&gt;不返回空结果将持续执行作业&lt;br /&gt;如果非流式处理数据, 则处理数据完成后作业结束&lt;br /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;job-script命名空间属性详细说明-基本属性参照job-simple命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;job:script命名空间属性详细说明，基本属性参照job:simple命名空间属性详细说明&lt;/h4&gt;

&lt;p&gt;job:script命名空间拥有job:simple命名空间的全部属性，以下仅列出特有属性&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;script-command-line&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;脚本型作业执行命令行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;job-listener命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;job:listener命名空间属性详细说明&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;job:listener&lt;/code&gt;必须配置为&lt;code&gt;job:bean&lt;/code&gt;的子元素&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;前置后置任务监听实现类，需实现&lt;code&gt;ElasticJobListener&lt;/code&gt;接口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;started-timeout-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;long&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;否&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Long.MAX_VALUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AbstractDistributeOnceElasticJobListener型监听器，最后一个作业执行前的执行方法的超时时间&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;completed-timeout-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;long&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;否&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Long.MAX_VALUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AbstractDistributeOnceElasticJobListener型监听器，最后一个作业执行后的执行方法的超时时间&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;reg-bean命名空间属性详细说明:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;reg:bean命名空间属性详细说明&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;注册中心在&lt;code&gt;Spring&lt;/code&gt;容器中的主键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;server-lists&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;连接&lt;code&gt;Zookeeper&lt;/code&gt;服务器的列表&lt;br /&gt;包括IP地址和端口号&lt;br /&gt;多个地址用逗号分隔&lt;br /&gt;如: host1:2181,host2:2181&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;namespace&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Zookeeper&lt;/code&gt;的命名空间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;base-sleep-time-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;等待重试的间隔时间的初始值&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;max-sleep-time-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;等待重试的间隔时间的最大值&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;max-retries&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最大重试次数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;session-timeout-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;60000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;会话超时时间&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;connection-timeout-milliseconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;15000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;连接超时时间&lt;br /&gt;单位：毫秒&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;digest&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;无验证&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;连接&lt;code&gt;Zookeeper&lt;/code&gt;的权限令牌&lt;br /&gt;缺省为不需要权限验证&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;nested-port&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;内嵌&lt;code&gt;Zookeeper&lt;/code&gt;的端口号&lt;br /&gt;-1表示不开启内嵌&lt;code&gt;Zookeeper&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;nested-data-dir&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;内嵌&lt;code&gt;Zookeeper&lt;/code&gt;的数据存储路径&lt;br /&gt;为空表示不开启内嵌&lt;code&gt;Zookeeper&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code&gt;
## 作业启动

### 1. Lite的Java启动方式

```java

public class JobDemo {
    
    public static void main(final String[] args) {
        new JobDemo().init();
    }
    
    private void init() {
        // 连接注册中心
        regCenter.init();
        // 启动作业
        new JobScheduler(regCenter, jobRootConfig).init();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-lite的spring启动方式:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;2. Lite的Spring启动方式&lt;/h3&gt;

&lt;p&gt;参见&lt;code&gt;Spring&lt;/code&gt;命名空间&lt;/p&gt;

&lt;h3 id=&#34;3-cloud启动方式:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;3. Cloud启动方式&lt;/h3&gt;

&lt;p&gt;需定义&lt;code&gt;Main&lt;/code&gt;方法并调用&lt;code&gt;Bootstrap.execute(args)&lt;/code&gt;，例子如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public class JobDemo {
    
    public static void main(final String[] args) {
        Bootstrap.execute(args);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后将作业和用于执行&lt;code&gt;Java Main&lt;/code&gt;方法的&lt;code&gt;Shell&lt;/code&gt;脚本打包为&lt;code&gt;gz.tar&lt;/code&gt;格式，然后使用&lt;code&gt;Cloud&lt;/code&gt;提供的&lt;code&gt;REST API&lt;/code&gt;将其部署至&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;系统。&lt;/p&gt;

&lt;h2 id=&#34;其他功能:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;其他功能&lt;/h2&gt;

&lt;h3 id=&#34;异常处理:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;异常处理&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;elastic-job&lt;/code&gt;在配置中提供了&lt;code&gt;JobProperties&lt;/code&gt;，可扩展&lt;code&gt;JobExceptionHandler&lt;/code&gt;接口，并设置&lt;code&gt;job_exception_handler&lt;/code&gt;定制异常处理流程，默认实现是记录日志但不抛出异常。&lt;/p&gt;

&lt;h3 id=&#34;定制化作业处理线程池:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;定制化作业处理线程池&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;elastic-job&lt;/code&gt;在配置中提供了&lt;code&gt;JobProperties&lt;/code&gt;，可扩展&lt;code&gt;ExecutorServiceHandler&lt;/code&gt;接口，并设置&lt;code&gt;executor_service_handler&lt;/code&gt;定制线程池。&lt;/p&gt;

&lt;h3 id=&#34;任务监听:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;任务监听&lt;/h3&gt;

&lt;p&gt;可通过配置多个任务监听器，在任务执行前和执行后执行监听的方法。监听器分为每台作业节点均执行和分布式场景中仅单一节点执行&lt;code&gt;2&lt;/code&gt;种。&lt;/p&gt;

&lt;h4 id=&#34;1-每台作业节点均执行的监听:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;1. 每台作业节点均执行的监听&lt;/h4&gt;

&lt;p&gt;若作业处理作业服务器的文件，处理完成后删除文件，可考虑使用每个节点均执行清理任务。此类型任务实现简单，且无需考虑全局分布式任务是否完成，请尽量使用此类型监听器。&lt;/p&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;定义监听器&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public class MyElasticJobListener implements ElasticJobListener {
    
    @Override
    public void beforeJobExecuted(final ShardingContexts shardingContexts) {
        // do something ...
    }
    
    @Override
    public void afterJobExecuted(final ShardingContexts shardingContexts) {
        // do something ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;将监听器作为参数传入&lt;code&gt;JobScheduler&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class JobMain {
    
    public static void main(final String[] args) {
        new JobScheduler(regCenter, jobConfig, new MyElasticJobListener()).init();    
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-分布式场景中仅单一节点执行的监听:6fde5c464b5cd157fa8c5a0e82fa63a0&#34;&gt;2. 分布式场景中仅单一节点执行的监听&lt;/h4&gt;

&lt;p&gt;若作业处理数据库数据，处理完成后只需一个节点完成数据清理任务即可。此类型任务处理复杂，需同步分布式环境下作业的状态同步，提供了超时设置来避免作业不同步导致的死锁，请谨慎使用。&lt;/p&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;定义监听器&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public final class TestDistributeOnceElasticJobListener extends AbstractDistributeOnceElasticJobListener {
    
    public TestDistributeOnceElasticJobListener(final long startTimeoutMills, final long completeTimeoutMills) {
        super(startTimeoutMills, completeTimeoutMills);
    }
    
    @Override
    public void doBeforeJobExecutedAtLastStarted(final ShardingContexts shardingContexts) {
        // do something ...
    }
    
    @Override
    public void doAfterJobExecutedAtLastCompleted(final ShardingContexts shardingContexts) {
        // do something ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;将监听器作为参数传入&lt;code&gt;JobScheduler&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class JobMain {

    public static void main(final String[] args) {
        long startTimeoutMills = 5000L;
        long completeTimeoutMills = 10000L;    
        new JobScheduler(regCenter, jobConfig, new MyDistributeOnceElasticJobListener(startTimeoutMills, completeTimeoutMills)).init();
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>部署指南</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/deploy_guide/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/deploy_guide/</guid>
      <description>

&lt;h1 id=&#34;部署指南:683f09d60aed8667eba01ae825b6e4c6&#34;&gt;部署指南&lt;/h1&gt;

&lt;h2 id=&#34;elastic-job-lite:683f09d60aed8667eba01ae825b6e4c6&#34;&gt;Elastic-Job-Lite&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;指定注册中心的&lt;code&gt;Zookeeper&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;部署运维平台&lt;code&gt;war&lt;/code&gt;文件至任何支持&lt;code&gt;Servlet&lt;/code&gt;的&lt;code&gt;Web&lt;/code&gt;容器(可选)。
运维平台以&lt;code&gt;war&lt;/code&gt;包形式提供，可自行部署至&lt;code&gt;tomcat&lt;/code&gt;或&lt;code&gt;jetty&lt;/code&gt;等支持&lt;code&gt;servlet&lt;/code&gt;的&lt;code&gt;web&lt;/code&gt;容器中。&lt;code&gt;elastic-job-console.war&lt;/code&gt;可通过&lt;code&gt;mvn install&lt;/code&gt;编译或&lt;code&gt;maven&lt;/code&gt;中央仓库获取。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;运行包含&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;和业务代码的&lt;code&gt;jar&lt;/code&gt;文件。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;elastic-job-cloud:683f09d60aed8667eba01ae825b6e4c6&#34;&gt;Elastic-Job-Cloud&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;和&lt;code&gt;Mesos&lt;/code&gt;指定注册中心的&lt;code&gt;Zookeeper&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;启动&lt;code&gt;Mesos Master&lt;/code&gt;和&lt;code&gt;Mesos Agent&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解压并启动&lt;code&gt;elastic-job-cloud-scheduler-${version}.tar.gz&lt;/code&gt;。可通过源码&lt;code&gt;mvn install&lt;/code&gt;编译获取。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将打包之后的作业&lt;code&gt;tar.gz&lt;/code&gt;文件放至网络可访问的位置，如：&lt;code&gt;ftp&lt;/code&gt;或&lt;code&gt;http&lt;/code&gt;。打包的&lt;code&gt;tar.gz&lt;/code&gt;文件中&lt;code&gt;Main&lt;/code&gt;方法需要调用&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;提供的&lt;code&gt;Bootstrap.execute&lt;/code&gt;方法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用curl命令注册待运行作业至&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;curl -l -H &amp;quot;Content-type: application/json&amp;quot; -X POST -d 
&#39;{&amp;quot;jobName&amp;quot;:&amp;quot;foo_job&amp;quot;,&amp;quot;jobClass&amp;quot;:&amp;quot;yourJobClass&amp;quot;,&amp;quot;jobExecutionType&amp;quot;:&amp;quot;TRANSIENT&amp;quot;,&amp;quot;cron&amp;quot;:&amp;quot;0/5 * * * * ?&amp;quot;,&amp;quot;shardingTotalCount&amp;quot;:5,&amp;quot;cpuCount&amp;quot;:0.1,&amp;quot;memoryMB&amp;quot;:64.0,&amp;quot;appURL&amp;quot;:&amp;quot;http://file_host:8080/foo-job.tar.gz&amp;quot;,&amp;quot;failover&amp;quot;:false,&amp;quot;misfire&amp;quot;:true} 
http://elastic_job_cloud_masterhost:8899/job/register&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;附录-elastic-job-cloud-master启动指南:683f09d60aed8667eba01ae825b6e4c6&#34;&gt;附录：Elastic-Job-Cloud-Master启动指南&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动：解压缩&lt;code&gt;elastic-job-cloud-scheduler-${version}.tar.gz&lt;/code&gt;并执行&lt;code&gt;bin\start.sh&lt;/code&gt;脚本。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;停止：不提供停止脚本，可直接使用&lt;code&gt;kill&lt;/code&gt;杀进程。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置：修改&lt;code&gt;conf\elastic-job-cloud.properties&lt;/code&gt;文件。配置项说明如下：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;默认值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hostname&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;服务器真实的&lt;code&gt;IP&lt;/code&gt;或&lt;code&gt;hostname&lt;/code&gt;，不能是&lt;code&gt;127.0.0.1&lt;/code&gt;或&lt;code&gt;localhost&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Mesos framework&lt;/code&gt;使用的用户名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mesos_url&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;zk://127.0.0.1:2181/mesos&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Mesos&lt;/code&gt;所使用的&lt;code&gt;Zookeeper&lt;/code&gt;地址&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;zk_servers&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;127.0.0.1:2181&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;所使用的&lt;code&gt;Zookeeper&lt;/code&gt;地址&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;zk_namespace&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;elastic-job-cloud&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;所使用的&lt;code&gt;Zookeeper&lt;/code&gt;命名空间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;zk_digest&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;所使用的&lt;code&gt;Zookeeper&lt;/code&gt;登录凭证&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;http_port&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;8899&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业操作的&lt;code&gt;Restful API&lt;/code&gt;所使用的端口号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>其他功能</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other_features/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other_features/</guid>
      <description>

&lt;h1 id=&#34;其他功能:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;其他功能&lt;/h1&gt;

&lt;h2 id=&#34;1-elastic-job-lite:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;1. Elastic-Job-Lite&lt;/h2&gt;

&lt;h3 id=&#34;作业操作api-other-lite-job-operate-api:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/lite_job_operate_api/&#34;&gt;作业操作API&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;运维平台-other-lite-web-console:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/lite_web_console/&#34;&gt;运维平台&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;作业运行状态监控-other-lite-execution-monitor:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/lite_execution_monitor/&#34;&gt;作业运行状态监控&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;作业分片策略-other-lite-job-strategy:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/lite_job_strategy/&#34;&gt;作业分片策略&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;dump作业运行信息-other-lite-dump:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/lite_dump/&#34;&gt;dump作业运行信息&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&#34;2-elastic-job-cloud:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;2 .Elastic-Job-Cloud&lt;/h2&gt;

&lt;h3 id=&#34;作业操作api-other-cloud-job-operate-api:3bff589538149fbb9b4c841bdafd58e5&#34;&gt;&lt;a href=&#34;../other/cloud_job_operate_api/&#34;&gt;作业操作API&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite作业操作API</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/lite_job_operate_api/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/lite_job_operate_api/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite作业操作api:bebb6c1b22663318144b5d761ed60253&#34;&gt;Elastic-Job-Lite作业操作API&lt;/h1&gt;

&lt;p&gt;REST API(TBD)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Cloud作业操作API</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/cloud_job_operate_api/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/cloud_job_operate_api/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-cloud作业操作api:1b13e2530a92fd882c2bbacf0a1f573b&#34;&gt;Elastic-Job-Cloud作业操作API&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;提供了作业操作的&lt;code&gt;Restful API&lt;/code&gt;。可通过&lt;code&gt;curl&lt;/code&gt;进行操作。&lt;/p&gt;

&lt;h2 id=&#34;注册作业:1b13e2530a92fd882c2bbacf0a1f573b&#34;&gt;注册作业&lt;/h2&gt;

&lt;p&gt;url：&lt;code&gt;job/register&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;方法：&lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参数类型：&lt;code&gt;application/json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参数列表：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;是否必填&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺省值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;jobName&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业名称。为&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;的作业唯一标识&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jobClass&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业实现类&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jobExecutionType&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Enum&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业实现类型。&lt;code&gt;TRANSIENT&lt;/code&gt;为瞬时作业，&lt;code&gt;DAEMON&lt;/code&gt;为常驻作业&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;cron&lt;/code&gt;表达式，用于配置作业触发时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shardingTotalCount&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业分片总数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cpuCount&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;double&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;单片作业所需要的CPU数量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;memoryMB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;double&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;单片作业所需要的内存MB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;appURL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;应用所在路径。必须是可以通过网络访问到的路径&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dockerImageName&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Docker&lt;/code&gt;镜像名称。目前为预留值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;failover&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否开启失效转移&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;misfire&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否开启错过任务重新执行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;beanName&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Spring&lt;/code&gt;方式配置&lt;code&gt;bean&lt;/code&gt;名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;applicationContext&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Spring&lt;/code&gt;方式配置&lt;code&gt;Spring&lt;/code&gt;配置文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jobEventConfigs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业事件配置，可配置log和rdb两种事件，如:`{&amp;ldquo;log&amp;rdquo;:{}}{&amp;ldquo;rdb&amp;rdquo;:{&amp;ldquo;url&amp;rdquo;:&amp;ldquo;&amp;rdquo;,&amp;ldquo;driverClassName&amp;rdquo;:&amp;ldquo;&amp;rdquo;,&amp;ldquo;username&amp;rdquo;:&amp;ldquo;&amp;rdquo;,&amp;ldquo;password&amp;rdquo;:&amp;ldquo;&amp;rdquo;,&amp;ldquo;logLevel&amp;rdquo;:&amp;ldquo;INFO&amp;rdquo;}}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Java&lt;/code&gt;方式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;curl -l -H &amp;quot;Content-type: application/json&amp;quot; -X POST -d &#39;{&amp;quot;jobName&amp;quot;:&amp;quot;foo_job&amp;quot;,&amp;quot;jobClass&amp;quot;:&amp;quot;yourJobClass&amp;quot;,&amp;quot;jobExecutionType&amp;quot;:&amp;quot;TRANSIENT&amp;quot;,&amp;quot;cron&amp;quot;:&amp;quot;0/5 * * * * ?&amp;quot;,&amp;quot;shardingTotalCount&amp;quot;:5,&amp;quot;cpuCount&amp;quot;:0.1,&amp;quot;memoryMB&amp;quot;:64.0,&amp;quot;dockerImageName&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;appURL&amp;quot;:&amp;quot;http://app_host:8080/foo-job.tar.gz&amp;quot;,&amp;quot;failover&amp;quot;:true,&amp;quot;misfire&amp;quot;:true}&#39; http://elastic_job_cloud_host:8899/job/register&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Spring&lt;/code&gt;方式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;curl -l -H &amp;quot;Content-type: application/json&amp;quot; -X POST -d 
&#39;{&amp;quot;jobName&amp;quot;:&amp;quot;foo_job&amp;quot;,&amp;quot;jobClass&amp;quot;:&amp;quot;yourJobClass&amp;quot;,&amp;quot;beanName&amp;quot;:&amp;quot;yourBeanName&amp;quot;,&amp;quot;applicationContext&amp;quot;:&amp;quot;applicationContext.xml&amp;quot;,&amp;quot;jobExecutionType&amp;quot;:&amp;quot;TRANSIENT&amp;quot;,
&amp;quot;cron&amp;quot;:&amp;quot;0/5 * * * * ?&amp;quot;,&amp;quot;shardingTotalCount&amp;quot;:5,&amp;quot;cpuCount&amp;quot;:0.1,&amp;quot;memoryMB&amp;quot;:64.0,&amp;quot;appURL&amp;quot;:&amp;quot;http://file_host:8080/foo-job.tar.gz&amp;quot;,&amp;quot;failover&amp;quot;:false,&amp;quot;misfire&amp;quot;:true}&#39; http://elastic_job_cloud_masterhost:8899/job/register&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;删除作业:1b13e2530a92fd882c2bbacf0a1f573b&#34;&gt;删除作业&lt;/h2&gt;

&lt;p&gt;url：&lt;code&gt;job/unregister&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;方法：&lt;code&gt;DELETE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参数类型：&lt;code&gt;application/text&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参数：作业名称&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -l -H &amp;quot;Content-type: application/text&amp;quot; -X DELETE -d &#39;foo_job&#39; http://elastic_job_cloud_host:8899/job/unregister&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite运维平台</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/lite_web_console/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/lite_web_console/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite运维平台:439bd6471bc872a959df6d32498bc19c&#34;&gt;Elastic-Job-Lite运维平台&lt;/h1&gt;

&lt;p&gt;以&lt;code&gt;war&lt;/code&gt;包形式提供，可自行部署至&lt;code&gt;tomcat&lt;/code&gt;或&lt;code&gt;jetty&lt;/code&gt;等支持&lt;code&gt;servlet&lt;/code&gt;的&lt;code&gt;web&lt;/code&gt;容器中。可通过&lt;code&gt;mvn install&lt;/code&gt;编译或&lt;code&gt;maven&lt;/code&gt;中央仓库获取。&lt;/p&gt;

&lt;h2 id=&#34;登录:439bd6471bc872a959df6d32498bc19c&#34;&gt;登录&lt;/h2&gt;

&lt;p&gt;默认用户名和密码是&lt;code&gt;root/root&lt;/code&gt;，可通过&lt;code&gt;conf\auth.properties&lt;/code&gt;修改默认登录账户。&lt;/p&gt;

&lt;h2 id=&#34;功能列表:439bd6471bc872a959df6d32498bc19c&#34;&gt;功能列表&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;登录安全控制&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;注册中心管理&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;作业维度状态查看&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;服务器维度状态查看&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;快捷修改作业设置&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;控制作业暂停，恢复运行，停止和删除&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;设计理念:439bd6471bc872a959df6d32498bc19c&#34;&gt;设计理念&lt;/h2&gt;

&lt;p&gt;运维平台和&lt;code&gt;elastic-job-lite&lt;/code&gt;并无直接关系，是通过读取作业注册中心数据展现作业状态，或更新注册中心数据修改全局配置。&lt;/p&gt;

&lt;p&gt;控制台只能控制作业本身是否运行，但不能控制作业进程的启动，因为控制台和作业本身服务器是完全分离的，控制台并不能控制作业服务器。&lt;/p&gt;

&lt;h2 id=&#34;不支持项:439bd6471bc872a959df6d32498bc19c&#34;&gt;不支持项&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;添加作业。
作业在首次运行时将自动添加。&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;以&lt;code&gt;jar&lt;/code&gt;方式启动，并无作业分发功能。如需完全通过运维平台发布作业，请使用&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;主要界面:439bd6471bc872a959df6d32498bc19c&#34;&gt;主要界面&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;总览页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/console/lite_index.png&#34; alt=&#34;总览页&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注册中心管理页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/console/lite_reg_center.png&#34; alt=&#34;注册中心管理页&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;作业详细信息页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/console/lite_job_details.png&#34; alt=&#34;作业详细信息页&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;服务器详细信息页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/console/lite_server_details.png&#34; alt=&#34;服务器详细信息页&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite作业运行状态监控</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/lite_execution_monitor/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/lite_execution_monitor/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite作业运行状态监控:1f9cda05dbaefbb38a1893608b3a502c&#34;&gt;Elastic-Job-Lite作业运行状态监控&lt;/h1&gt;

&lt;p&gt;通过监听&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;的&lt;code&gt;zookeeper&lt;/code&gt;注册中心的几个关键节点即可完成作业运行状态监控功能。&lt;/p&gt;

&lt;h2 id=&#34;监听作业服务器存活:1f9cda05dbaefbb38a1893608b3a502c&#34;&gt;监听作业服务器存活&lt;/h2&gt;

&lt;p&gt;监听&lt;code&gt;job_name\servers\ip_address\status&lt;/code&gt;节点是否存在。该节点为临时节点，如果作业服务器下线，该节点将删除。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite作业分片策略</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/lite_job_strategy/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/lite_job_strategy/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite作业分片策略:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;Elastic-Job-Lite作业分片策略&lt;/h1&gt;

&lt;h2 id=&#34;框架提供的分片策略:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;框架提供的分片策略&lt;/h2&gt;

&lt;h3 id=&#34;averageallocationjobshardingstrategy:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;AverageAllocationJobShardingStrategy&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;全路径：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;com.dangdang.ddframe.job.lite.api.strategy.AverageAllocationJobShardingStrategy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;策略说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基于平均分配算法的分片策略，也是默认的分片策略。&lt;/p&gt;

&lt;p&gt;如果分片不能整除，则不能整除的多余分片将依次追加到序号小的服务器。如：&lt;/p&gt;

&lt;p&gt;如果有&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;9&lt;/code&gt;片，则每台服务器分到的分片是：&lt;code&gt;1=[0,1,2], 2=[3,4,5], 3=[6,7,8]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果有&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;8&lt;/code&gt;片，则每台服务器分到的分片是：&lt;code&gt;1=[0,1,6], 2=[2,3,7], 3=[4,5]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果有&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;10&lt;/code&gt;片，则每台服务器分到的分片是：&lt;code&gt;1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;odevitysortbynamejobshardingstrategy:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;OdevitySortByNameJobShardingStrategy&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;全路径：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;com.dangdang.ddframe.job.lite.api.strategy.OdevitySortByNameJobShardingStrategy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;策略说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据作业名的哈希值奇偶数决定&lt;code&gt;IP&lt;/code&gt;升降序算法的分片策略。&lt;/p&gt;

&lt;p&gt;作业名的哈希值为奇数则&lt;code&gt;IP&lt;/code&gt;升序。&lt;/p&gt;

&lt;p&gt;作业名的哈希值为偶数则&lt;code&gt;IP&lt;/code&gt;降序。&lt;/p&gt;

&lt;p&gt;用于不同的作业平均分配负载至不同的服务器。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AverageAllocationJobShardingStrategy&lt;/code&gt;的缺点是，一旦分片数小于作业服务器数，作业将永远分配至&lt;code&gt;IP&lt;/code&gt;地址靠前的服务器，导致&lt;code&gt;IP&lt;/code&gt;地址靠后的服务器空闲。而&lt;code&gt;OdevitySortByNameJobShardingStrategy&lt;/code&gt;则可以根据作业名称重新分配服务器负载。如：&lt;/p&gt;

&lt;p&gt;如果有&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;2&lt;/code&gt;片，作业名称的哈希值为奇数，则每台服务器分到的分片是：&lt;code&gt;1=[0], 2=[1], 3=[]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果有&lt;code&gt;3&lt;/code&gt;台服务器，分成&lt;code&gt;2&lt;/code&gt;片，作业名称的哈希值为偶数，则每台服务器分到的分片是：&lt;code&gt;3=[0], 2=[1], 1=[]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;rotateserverbynamejobshardingstrategy:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;RotateServerByNameJobShardingStrategy&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;全路径：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;com.dangdang.ddframe.job.lite.api.strategy.RotateServerByNameJobShardingStrategy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;策略说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据作业名的哈希值对服务器列表进行轮转的分片策略。&lt;/p&gt;

&lt;h2 id=&#34;自定义分片策略:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;自定义分片策略&lt;/h2&gt;

&lt;p&gt;实现&lt;code&gt;JobShardingStrategy&lt;/code&gt;接口并实现&lt;code&gt;sharding&lt;/code&gt;方法，接口方法参数为作业服务器&lt;code&gt;IP&lt;/code&gt;列表和分片策略选项，分片策略选项包括作业名称，分片总数以及分片序列号和个性化参数对照表，可以根据需求定制化自己的分片策略。&lt;/p&gt;

&lt;p&gt;欢迎将分片策略以插件的形式贡献至&lt;code&gt;com.dangdang.ddframe.job.lite.api.strategy&lt;/code&gt;包。&lt;/p&gt;

&lt;h2 id=&#34;配置分片策略:e08f51da0b1c824f68f6b0c4969107bc&#34;&gt;配置分片策略&lt;/h2&gt;

&lt;p&gt;与配置通常的作业属性相同，在&lt;code&gt;spring&lt;/code&gt;命名空间或者&lt;code&gt;JobConfiguration&lt;/code&gt;中配置&lt;code&gt;jobShardingStrategyClass&lt;/code&gt;属性，属性值是作业分片策略类的全路径。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite dump作业运行信息</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/lite_dump/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/user_guide/other/lite_dump/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite-dump作业运行信息:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;Elastic-Job-Lite dump作业运行信息&lt;/h1&gt;

&lt;p&gt;使用&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;过程中可能会碰到一些分布式问题，导致作业运行不稳定。&lt;/p&gt;

&lt;p&gt;由于无法在生产环境调试，通过&lt;code&gt;dump&lt;/code&gt;命令可以把作业内部相关信息&lt;code&gt;dump&lt;/code&gt;出来，方便开发者&lt;code&gt;debug&lt;/code&gt;分析；
另外为了不泄露隐私，已将相关信息中的&lt;code&gt;ip&lt;/code&gt;地址以&lt;code&gt;ip1, ip2...&lt;/code&gt;的形式过滤，可以在互联网上公开传输环境信息，便于进一步完善&lt;code&gt;Elastic-Job&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;如何使用:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;如何使用&lt;/h2&gt;

&lt;h3 id=&#34;配置监听端口:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;配置监听端口&lt;/h3&gt;

&lt;p&gt;支持两种配置方式&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring方式&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xmlns:reg=&amp;quot;http://www.dangdang.com/schema/ddframe/reg&amp;quot;
    xmlns:job=&amp;quot;http://www.dangdang.com/schema/ddframe/job&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans.xsd 
                        http://www.dangdang.com/schema/ddframe/reg 
                        http://www.dangdang.com/schema/ddframe/reg/reg.xsd 
                        http://www.dangdang.com/schema/ddframe/job 
                        http://www.dangdang.com/schema/ddframe/job/job.xsd 
                        &amp;quot;&amp;gt;
    &amp;lt;!--配置作业注册中心 --&amp;gt;
    &amp;lt;reg:zookeeper id=&amp;quot;regCenter&amp;quot; server-lists=&amp;quot; yourhost:2181&amp;quot; namespace=&amp;quot;dd-job&amp;quot; base-sleep-time-milliseconds=&amp;quot;1000&amp;quot; max-sleep-time-milliseconds=&amp;quot;3000&amp;quot; max-retries=&amp;quot;3&amp;quot; /&amp;gt;
    
    &amp;lt;!-- 配置作业--&amp;gt;
    &amp;lt;job:simple id=&amp;quot;oneOffElasticJob&amp;quot; monitor-port=&amp;quot;9888&amp;quot; class=&amp;quot;xxx.MyElasticJob&amp;quot; registry-center-ref=&amp;quot;regCenter&amp;quot; cron=&amp;quot;0/10 * * * * ?&amp;quot;   sharding-total-count=&amp;quot;3&amp;quot; sharding-item-parameters=&amp;quot;0=A,1=B,2=C&amp;quot; /&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Java方式&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class JobMain {
    public static void main(final String[] args) {
        // ...
        jobConfig.setMonitorPort(9888);
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;启动作业:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;启动作业&lt;/h3&gt;

&lt;h3 id=&#34;执行dump命令:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;执行dump命令&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;dump&lt;/code&gt;命令完全参照&lt;code&gt;Zookeeper&lt;/code&gt;的四字命令理念&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;dump&amp;quot; | nc &amp;lt;任意一台作业服务器IP&amp;gt; 9888
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../../../../img/dump/dump.jpg&#34; alt=&#34;dump命令&#34; /&gt;&lt;/p&gt;

&lt;p&gt;导出至文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;dump&amp;quot; | nc &amp;lt;任意一台作业服务器IP&amp;gt; 9888 &amp;gt; job_debug.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用注意事项:e2cd0391e6bf7f5cd1492cee43ec01af&#34;&gt;使用注意事项&lt;/h2&gt;

&lt;p&gt;务必更新至&lt;code&gt;1.0.3&lt;/code&gt;以上版本&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic-Job-Lite实现原理</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/principles/lite/</link>
      <pubDate>Thu, 28 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/principles/lite/</guid>
      <description>

&lt;h1 id=&#34;elastic-job-lite实现原理:46a15dac21612a46efd5032abee0dea1&#34;&gt;Elastic-Job-Lite实现原理&lt;/h1&gt;

&lt;h2 id=&#34;弹性分布式实现:46a15dac21612a46efd5032abee0dea1&#34;&gt;弹性分布式实现&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一台服务器上线触发主服务器选举。主服务器一旦下线，则重新触发选举，选举过程中阻塞，只有主服务器选举完成，才会执行其他任务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;某作业服务器上线时会自动将服务器信息注册到注册中心，下线时会自动更新服务器状态。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;主节点选举，服务器上下线，分片总数变更均更新重新分片标记。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;定时任务触发时，如需重新分片，则通过主服务器分片，分片过程中阻塞，分片结束后才可执行任务。如分片过程中主服务器下线，则先选举主服务器，再分片。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过上一项说明可知，为了维持作业运行时的稳定性，运行过程中只会标记分片状态，不会重新分片。分片仅可能发生在下次任务触发前。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每次分片都会按服务器&lt;code&gt;IP&lt;/code&gt;排序，保证分片结果不会产生较大波动。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;实现失效转移功能，在某台服务器执行完毕后主动抓取未分配的分片，并且在某台服务器下线后主动寻找可用的服务器执行任务。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;注册中心数据结构:46a15dac21612a46efd5032abee0dea1&#34;&gt;注册中心数据结构&lt;/h2&gt;

&lt;p&gt;注册中心在定义的命名空间下，创建作业名称节点，用于区分不同作业，所以作业一旦创建则不能修改作业名称，如果修改名称将视为新的作业。作业名称节点下又包含4个数据子节点，分别是&lt;code&gt;config&lt;/code&gt;, &lt;code&gt;servers&lt;/code&gt;, &lt;code&gt;execution&lt;/code&gt;和&lt;code&gt;leader&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;概览:46a15dac21612a46efd5032abee0dea1&#34;&gt;概览&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../../../img/principles/reg_center.jpg&#34; alt=&#34;注册中心数据结构&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;config节点:46a15dac21612a46efd5032abee0dea1&#34;&gt;config节点&lt;/h3&gt;

&lt;p&gt;作业配置信息，以&lt;code&gt;JSON&lt;/code&gt;格式存储&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JSON属性名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;jobName&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业名称，为&lt;code&gt;Elastic-Job&lt;/code&gt;唯一标识&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jobClass&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业实现类名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jobType&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业类型，目前支持&lt;code&gt;SIMPLE&lt;/code&gt;，&lt;code&gt;DATAFLOW&lt;/code&gt;和&lt;code&gt;SCRIPT&lt;/code&gt;三种类型&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cron&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业启动时间的&lt;code&gt;cron&lt;/code&gt;表达式&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shardingTotalCount&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业分片总数，修改会导致运行中作业重新分片&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shardingItemParameters&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分片序列号和个性化参数对照表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jobParameter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业自定义参数，可通过传递该参数为作业调度的业务方法传参，用于实现带参数的作业&lt;br /&gt;例：每次获取的数据量、作业实例从数据库读取的主键等&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;failover&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否开启失效转移，仅&lt;code&gt;monitorExecution&lt;/code&gt;开启时才起作用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;misfire&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否开启错过任务重新执行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;description&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业描述信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;monitorExecution&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;监控作业执行时状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;maxTimeDiffSeconds&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;允许的本机与注册中心的时间误差秒数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;monitorPort&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;使用&lt;code&gt;dump&lt;/code&gt;命令的端口，为-1则表示不开启端口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dataflowType&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;DATAFLW&lt;/code&gt;类型作业的子类型，目前支持&lt;code&gt;THROUGHPUT&lt;/code&gt;和&lt;code&gt;SEQUENCE&lt;/code&gt;两种类型&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;streamingProcess&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否流式处理数据&lt;br /&gt;如果流式处理数据，则&lt;code&gt;fetchData&lt;/code&gt;不返回空结果将持续执行作业&lt;br /&gt;如果非流式处理数据, 则处理数据完成后作业结束&lt;br /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;concurrentDataProcessThreadCount&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;同时处理数据的并发线程数，仅&lt;code&gt;DATAFLOW&lt;/code&gt;的&lt;code&gt;THROUGHPUT&lt;/code&gt;类型有效&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;scriptCommandLine&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;SCRIPT&lt;/code&gt;型作业作业执行命令行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jobProperties&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业定制化属性，目前支持&lt;code&gt;job_exception_handler&lt;/code&gt;和&lt;code&gt;executor_service_handler&lt;/code&gt;，用于扩展异常处理和自定义作业处理线程池&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;servers节点:46a15dac21612a46efd5032abee0dea1&#34;&gt;servers节点&lt;/h3&gt;

&lt;p&gt;作业服务器信息，子节点是作业服务器的&lt;code&gt;IP&lt;/code&gt;地址。&lt;code&gt;IP&lt;/code&gt;地址节点的子节点存储详细信息。同一台作业服务器只能运行一个相同的作业实例，因为作业运行时是按照&lt;code&gt;IP&lt;/code&gt;注册和管理的。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;子节点名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;临时节点&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hostName&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业服务器名称&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;status&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业服务器状态，分为READY和RUNNING&lt;br /&gt;用于表示服务器在等待执行作业还是正在执行作业&lt;br /&gt;如果status节点不存在则表示作业服务器未上线&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;disabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;作业服务器状态是否禁用&lt;br /&gt;可用于部署作业时，先禁止启动，部署结束后统一启动&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sharding&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;该作业服务器分到的作业分片项&lt;br /&gt;多个分片项用逗号分隔&lt;br /&gt;如：&lt;code&gt;0, 1, 2&lt;/code&gt;代表该服务器执行第&lt;code&gt;1, 2, 3&lt;/code&gt;片分片&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;paused&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;暂停作业的标记，暂停的作业不会终止调度器运行。作业程序再次启动时不会清理此标记&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;shutdown&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;关闭作业的标记，关闭的作业将停止调度，并可通过控制台删除。只有作业程序再次启动时才会清理此标记&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;trigger&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;立刻触发作业的标记，作业在不与上次运行中作业冲突的情况下将立刻启动，并在启动后自动清理此标记&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;execution节点:46a15dac21612a46efd5032abee0dea1&#34;&gt;execution节点&lt;/h3&gt;

&lt;p&gt;执行时信息，子节点是分片项序号，从零开始，至分片总数减一。分片项序号的子节点存储详细信息。可通过配置&lt;code&gt;config\monitorExecution&lt;/code&gt;为&lt;code&gt;false&lt;/code&gt;关闭记录作业执行时信息。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;子节点名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;临时节点&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;running&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分片项正在运行的状态&lt;br /&gt;如果没有此节点，并且没有&lt;code&gt;completed&lt;/code&gt;节点，表示该分片未运行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;completed&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分片项运行完成的状态&lt;br /&gt;下次作业开始执行时会清理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;failover&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果该分片项被失效转移分配给其他作业服务器，则此节点值记录执行此分片的作业服务器&lt;code&gt;IP&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;lastBeginTime&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;该分片项最近一次的开始执行时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;nextFireTime&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;该分片项下次作业触发时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;lastCompleteTime&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;该分片项最近一次的结束执行时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;misfire&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否开启错过任务重新执行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;leader节点:46a15dac21612a46efd5032abee0dea1&#34;&gt;leader节点&lt;/h3&gt;

&lt;p&gt;作业服务器主节点信息，分为&lt;code&gt;election&lt;/code&gt;，&lt;code&gt;sharding&lt;/code&gt;和&lt;code&gt;execution&lt;/code&gt;三个子节点。分别用于主节点选举，分片和作业执行时处理。&lt;/p&gt;

&lt;p&gt;leader节点是内部使用的节点，如果对作业框架原理不感兴趣，可不关注此节点。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;子节点名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;临时节点&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;election\host&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;主节点服务器&lt;code&gt;IP&lt;/code&gt;地址&lt;br /&gt;一旦该节点被删除将会触发重新选举&lt;br /&gt;重新选举的过程中一切主节点相关的操作都将阻塞&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;election\latch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;主节点选举的分布式锁&lt;br /&gt;为&lt;code&gt;curator&lt;/code&gt;的分布式锁使用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sharding\necessary&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否需要重新分片的标记&lt;br /&gt;如果分片总数变化，或作业服务器节点上下线或启用/禁用，以及主节点选举，会触发设置重分片标记&lt;br /&gt;作业在下次执行时使用主节点重新分片，且中间不会被打断&lt;br /&gt;作业执行时不会触发分片&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sharding\processing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;主节点在分片时持有的节点&lt;br /&gt;如果有此节点，所有的作业执行都将阻塞，直至分片结束&lt;br /&gt;主节点分片结束或主节点崩溃会删除此临时节点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;execution\necessary&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;是否需要修正作业执行时分片项信息的标记&lt;br /&gt;如果分片总数变化，会触发设置修正分片项信息标记&lt;br /&gt;作业在下次执行时会增加或减少分片项数量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;execution\cleaning&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;是&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;主节点在清理上次作业运行时状态时所持有的节点&lt;br /&gt;每次开始新作业都需要清理上次运行完成的作业信息&lt;br /&gt;如果有此节点，所有的作业执行都将阻塞，直至清理结束&lt;br /&gt;主节点分片结束或主节点崩溃会删除此临时节点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;failover\items\分片项&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一旦有作业崩溃，则会向此节点记录&lt;br /&gt;当有空闲作业服务器时，会从此节点抓取需失效转移的作业项&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;failover\items\latch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分配失效转移分片项时占用的分布式锁&lt;br /&gt;为&lt;code&gt;curator&lt;/code&gt;的分布式锁使用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;流程图:46a15dac21612a46efd5032abee0dea1&#34;&gt;流程图&lt;/h2&gt;

&lt;h3 id=&#34;作业启动:46a15dac21612a46efd5032abee0dea1&#34;&gt;作业启动&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../../../img/principles/job_start.jpg&#34; alt=&#34;作业启动&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;作业执行:46a15dac21612a46efd5032abee0dea1&#34;&gt;作业执行&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../../../img/principles/job_exec.jpg&#34; alt=&#34;作业执行&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/faq/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/faq/</guid>
      <description>

&lt;h1 id=&#34;faq:4a1318da06786ac52626178ca960109e&#34;&gt;FAQ&lt;/h1&gt;

&lt;h3 id=&#34;1-阅读源码时为什么会出现编译错误:4a1318da06786ac52626178ca960109e&#34;&gt;1. 阅读源码时为什么会出现编译错误?&lt;/h3&gt;

&lt;p&gt;回答：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job&lt;/code&gt;使用&lt;code&gt;lombok&lt;/code&gt;实现极简代码。关于更多使用和安装细节，请参考&lt;a href=&#34;https://projectlombok.org/download.html&#34;&gt;lombok官网&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;2-使用-spring-命名空间时在网上相应地址找不到-xsd:4a1318da06786ac52626178ca960109e&#34;&gt;2. 使用&lt;code&gt;Spring&lt;/code&gt;命名空间时在网上相应地址找不到&lt;code&gt;xsd&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;回答：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;命名空间使用规范并未强制要求将&lt;code&gt;xsd&lt;/code&gt;文件部署至公网地址，只需在&lt;code&gt;jar&lt;/code&gt;包的&lt;code&gt;META-INF\spring.schemas&lt;/code&gt;配置，并在&lt;code&gt;jar&lt;/code&gt;包中相关位置存在即可。&lt;/p&gt;

&lt;p&gt;我们并未将&lt;code&gt;http://www.dangdang.com/schema/ddframe/reg/reg.xsd&lt;/code&gt;和&lt;code&gt;http://www.dangdang.com/schema/ddframe/job/job.xsd&lt;/code&gt;部署至公网，但并不影响使用。相关问题请参考&lt;code&gt;Spring&lt;/code&gt;命名空间规范。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;3-为什么在代码或-spring-配置文件中修改了作业配置-注册中心配置却没有更新:4a1318da06786ac52626178ca960109e&#34;&gt;3. 为什么在代码或&lt;code&gt;Spring&lt;/code&gt;配置文件中修改了作业配置，注册中心配置却没有更新?&lt;/h3&gt;

&lt;p&gt;回答：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;采用无中心化设计，若每个客户端的配置不一致，不做控制的话，最后一个启动的客户端配置将会成为注册中心的最终配置。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;提出了&lt;code&gt;overwrite&lt;/code&gt;概念，可通过&lt;code&gt;JobConfiguration&lt;/code&gt;或&lt;code&gt;Spring&lt;/code&gt;命名空间配置。&lt;code&gt;overwrite=true&lt;/code&gt;即允许客户端配置覆盖注册中心，反之则不允许。如果注册中心无相关作业的配置，则无论&lt;code&gt;overwrite&lt;/code&gt;是否配置，客户端配置都将写入注册中心。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;4-怀疑-elastic-job-lite-在分布式环境中有问题-但无法重现又不能在线上环境调试-应该怎么做:4a1318da06786ac52626178ca960109e&#34;&gt;4. 怀疑&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;在分布式环境中有问题，但无法重现又不能在线上环境调试，应该怎么做?&lt;/h3&gt;

&lt;p&gt;回答：&lt;/p&gt;

&lt;p&gt;分布式问题非常难于调试和重现，为此&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;提供了&lt;code&gt;dump&lt;/code&gt;命令。&lt;/p&gt;

&lt;p&gt;如果您怀疑某些场景出现问题，可参照&lt;a href=&#34;../user_guide/other/lite_dump/&#34;&gt;dump文档&lt;/a&gt;将作业运行时信息发给我们、提交&lt;code&gt;issue&lt;/code&gt;或发至&lt;code&gt;QQ&lt;/code&gt;群讨论。我们已将&lt;code&gt;IP&lt;/code&gt;等敏感信息过滤，&lt;code&gt;dump&lt;/code&gt;出来的信息可在公网安全传输。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;5-elastic-job-有何使用限制:4a1318da06786ac52626178ca960109e&#34;&gt;5. &lt;code&gt;Elastic-Job&lt;/code&gt;有何使用限制?&lt;/h3&gt;

&lt;p&gt;回答：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;和&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;的共同使用限制：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;作业启动成功后修改作业名称视为新作业，原作业废弃。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;的使用限制：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;同一台作业服务器只能运行一个相同的作业实例，因为作业运行时是按照&lt;code&gt;IP&lt;/code&gt;注册和管理的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一旦有服务器波动，或者修改分片项，将会触发重新分片；触发重新分片将会导致运行中的流式处理的作业在执行完本次作业后不再继续执行，等待分片结束后再恢复正常。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开启&lt;code&gt;monitorExecution&lt;/code&gt;才能实现分布式作业幂等性（即不会在多个作业服务器运行同一个分片）的功能，但&lt;code&gt;monitorExecution&lt;/code&gt;对短时间内执行的作业（如每5秒一触发）性能影响较大，建议关闭并自行实现幂等性。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;6-是否支持动态添加作业:4a1318da06786ac52626178ca960109e&#34;&gt;6. 是否支持动态添加作业?&lt;/h3&gt;

&lt;p&gt;回答：&lt;/p&gt;

&lt;p&gt;动态添加作业这个概念每个人理解不尽相同。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;elastic-job-lite&lt;/code&gt;为&lt;code&gt;jar&lt;/code&gt;包，由开发或运维人员负责启动。启动时自动向注册中心注册作业信息并进行分布式协调，因此并不需要手工在注册中心填写作业信息。
但注册中心与作业部署机无从属关系，注册中心并不能控制将单点的作业分发至其他作业机，也无法将远程服务器未启动的作业启动。&lt;code&gt;elastic-job-lite&lt;/code&gt;并不会包含&lt;code&gt;ssh&lt;/code&gt;免密管理等功能。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;elastic-job-cloud&lt;/code&gt;为&lt;code&gt;mesos&lt;/code&gt;框架，由&lt;code&gt;mesos&lt;/code&gt;负责作业启动和分发。
但需要将作业打包上传，并调用&lt;code&gt;elastic-job-cloud&lt;/code&gt;提供的&lt;code&gt;REST API&lt;/code&gt;写入注册中心。
打包上传属于部署系统的范畴&lt;code&gt;elastic-job-cloud&lt;/code&gt;并未涉及。&lt;/p&gt;

&lt;p&gt;综上所述，&lt;code&gt;elastic-job&lt;/code&gt;已做了基本动态添加功能，但无法做到真正意义的完全自动化添加。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;7-使用-spring-占位符出错:4a1318da06786ac52626178ca960109e&#34;&gt;7. 使用&lt;code&gt;Spring&lt;/code&gt;占位符出错?&lt;/h3&gt;

&lt;p&gt;回答：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Elastic-Job&lt;/code&gt;的&lt;code&gt;Spring&lt;/code&gt;命名空间以及占位符仅支持&lt;code&gt;Spring 4&lt;/code&gt;及其以上版本。低版本的&lt;code&gt;Spring&lt;/code&gt;不支持这些功能。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;8-zookeeper-版本不是-3-4-6-会有什么问题:4a1318da06786ac52626178ca960109e&#34;&gt;8. &lt;code&gt;Zookeeper&lt;/code&gt;版本不是&lt;code&gt;3.4.6&lt;/code&gt;会有什么问题?&lt;/h3&gt;

&lt;p&gt;回答：&lt;/p&gt;

&lt;p&gt;根据测试，使用&lt;code&gt;3.3.6&lt;/code&gt;版本的&lt;code&gt;Zookeeper&lt;/code&gt;在使用&lt;code&gt;Curator 2.10.0&lt;/code&gt;的&lt;code&gt;CuratorTransactionFinal&lt;/code&gt;的&lt;code&gt;commit&lt;/code&gt;时会导致死锁。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;9-elastic-job-2-0-0-版本-api-改动较大-升级时需要注意哪些问题:4a1318da06786ac52626178ca960109e&#34;&gt;9. &lt;code&gt;Elastic-Job 2.0.0&lt;/code&gt;版本&lt;code&gt;API&lt;/code&gt;改动较大，升级时需要注意哪些问题?&lt;/h3&gt;

&lt;p&gt;回答：&lt;/p&gt;

&lt;p&gt;基于扩展性提升，概念明晰和命名规范化的考虑，&lt;code&gt;elastic-job 2.100&lt;/code&gt;版本决定抛弃原有包袱的束缚，重新定义了&lt;code&gt;JAVA API&lt;/code&gt;，&lt;code&gt;Spring&lt;/code&gt;命名空间并且删除了已废弃的&lt;code&gt;API&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重新定义&lt;code&gt;JAVA API&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;配置分为&lt;code&gt;Core&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;和&lt;code&gt;Root&lt;/code&gt;3个层级，使用类装饰者模式创建。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;作业从继承抽象类改为接口化，提供&lt;code&gt;SimpleJob&lt;/code&gt;, &lt;code&gt;DataflowJob&lt;/code&gt;和&lt;code&gt;ScriptJob&lt;/code&gt;接口。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;DataflowJob&lt;/code&gt;作业类型简化，去除批量和逐条处理分别，统一使用批量处理，&lt;code&gt;THROUGHPUT&lt;/code&gt;和&lt;code&gt;SEQUENCE&lt;/code&gt;作业不再提供单独接口，而是统一通过配置方式实现。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;重新定义&lt;code&gt;Spring&lt;/code&gt;命名空间&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;删除&lt;code&gt;&amp;lt;job:bean&amp;gt;&lt;/code&gt;，细化为&lt;code&gt;&amp;lt;job:simple&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;job:dataflow&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;job:script&amp;gt;&lt;/code&gt;具体类型。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;命名空间属性由驼峰式修正为&lt;code&gt;Spring&lt;/code&gt;命名空间标准命名规范(多单词以&lt;code&gt;-&lt;/code&gt;分隔)。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;作业的&lt;code&gt;Spring&lt;/code&gt;命名空间属性&lt;code&gt;regCenter&lt;/code&gt;变更为&lt;code&gt;registry-center-ref&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;删除非核心功能&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;删除&lt;code&gt;offset&lt;/code&gt;功能。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;删除n分钟内正确错误数量统计功能，未来由更加全面的作业事件追踪功能替换。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;废弃过时&lt;code&gt;API&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;删除废弃作业类，包括&lt;code&gt;AbstractOneOffElasticJob&lt;/code&gt;，&lt;code&gt;AbstractPerpetualElasticJob&lt;/code&gt;和&lt;code&gt;AbstractSequencePerpetualElasticJob&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;删除废弃作业调度器类，包括&lt;code&gt;com.dangdang.ddframe.job.schedule.JobController&lt;/code&gt;和&lt;code&gt;com.dangdang.ddframe.job.spring.schedule.SpringJobController&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不再支持非&lt;code&gt;Spring&lt;/code&gt;命名空间通过&lt;code&gt;xml&lt;/code&gt;方式配置&lt;code&gt;bean&lt;/code&gt;，如有需要请使用&lt;code&gt;Spring Java Config&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>采用公司</title>
      <link>http://dangdangdotcom.github.io/elastic-job/post/companies_using/</link>
      <pubDate>Wed, 27 Jan 2016 16:14:21 +0800</pubDate>
      
      <guid>http://dangdangdotcom.github.io/elastic-job/post/companies_using/</guid>
      <description>

&lt;h1 id=&#34;采用公司:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;采用公司&lt;/h1&gt;

&lt;p&gt;公司排名不分先后，按拼音顺序排名&lt;/p&gt;

&lt;h2 id=&#34;36氪-http-36kr-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://36kr.com/&#34;&gt;36氪&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;e护通-http-www-moreecare-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.moreecare.com/&#34;&gt;E护通&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;pintec-积木盒子母公司-http-www-pintec-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.pintec.com/&#34;&gt;PINTEC（积木盒子母公司）&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;当当-http-www-dangdang-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.dangdang.com/&#34;&gt;当当&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;记健康-http-www-jjklife-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.jjklife.com/&#34;&gt;记健康&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;简理财-http-www-jianlc-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.jianlc.com/&#34;&gt;简理财&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;就医160-http-www-91160-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.91160.com/&#34;&gt;就医160&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;快钱-https-www-99bill-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;https://www.99bill.com/&#34;&gt;快钱&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;拉手网-http-www-lashou-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.lashou.com/&#34;&gt;拉手网&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;全时-http-www-quanshi-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.quanshi.com/&#34;&gt;全时&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;赛特斯-http-www-certusnet-com-cn:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.certusnet.com.cn/&#34;&gt;赛特斯&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;拓尔思-http-www-trs-com-cn:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.trs.com.cn/&#34;&gt;拓尔思&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;微盟-http-www-weimob-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.weimob.com/&#34;&gt;微盟&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;唯品会-http-www-vip-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.vip.com/&#34;&gt;唯品会&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;网仓-http-www-iscs-com-cn:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.iscs.com.cn/&#34;&gt;网仓&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;文轩网-http-www-winxuan-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.winxuan.com/&#34;&gt;文轩网&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;华图教育-http-bj-huatu-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://bj.huatu.com/&#34;&gt;华图教育&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;亚信-http-www-asiainfo-com-cn:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.asiainfo.com.cn/&#34;&gt;亚信&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;一加手机-http-www-oneplus-cn:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.oneplus.cn/&#34;&gt;一加手机&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;蚁坊软件-http-www-eefung-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.eefung.com/&#34;&gt;蚁坊软件&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;翼龙贷-http-www-eloancn-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.eloancn.com/&#34;&gt;翼龙贷&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;翼支付-https-www-bestpay-com-cn:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;https://www.bestpay.com.cn/&#34;&gt;翼支付&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;银狐财富-https-www-silverfox-cn-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;https://www.silverfox-cn.com/&#34;&gt;银狐财富&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;云猴网-http-www-yunhou-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.yunhou.com/&#34;&gt;云猴网&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;浙江电子口岸-http-www-zjport-gov-cn:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.zjport.gov.cn/&#34;&gt;浙江电子口岸&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;浙金网-https-www-zjmax-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;https://www.zjmax.com/&#34;&gt;浙金网&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;中国平安-http-www-pingan-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.pingan.com/&#34;&gt;中国平安&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;赚啦理财-http-www-zhuanlalicai-com:7db0d6ce61d20333337de7ea77bb7f1b&#34;&gt;&lt;a href=&#34;http://www.zhuanlalicai.com/&#34;&gt;赚啦理财&lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>